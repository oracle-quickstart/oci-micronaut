plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.4"
    id("io.micronaut.aot") version "4.3.4"
    id("io.micronaut.test-resources") version "4.3.4"
}

group = "micronaut.mushop"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("mushop.orders.*")
    }aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true 
        optimizeNetty = true
        }
        }
        
dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.tracing:micronaut-tracing-opentelemetry-annotation")

    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation("io.micronaut:micronaut-retry")
    implementation("io.micronaut:micronaut-http-client")
    implementation("org.mapstruct:mapstruct:1.5.5.Final")

    // Metrics
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")

    // Database
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    runtimeOnly("com.h2database:h2")

    // Nats.io support
    implementation("io.micronaut.nats:micronaut-nats")

    // Kubernetes service discovery
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")

    // Tracing
    implementation("io.micronaut.tracing:micronaut-tracing-core")
     implementation("io.micronaut.tracing:micronaut-tracing-opentelemetry-http")
   implementation("io.opentelemetry:opentelemetry-exporter-zipkin")

    // Swagger
    implementation("io.swagger.core.v3:swagger-annotations")

    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")
    runtimeOnly("org.yaml:snakeyaml")
    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation(project(":tck"))
    testImplementation("com.openpojo:openpojo:0.9.1")
    testImplementation("io.micronaut:micronaut-http-client")

}

application {
    mainClass.set("mushop.orders.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

if (javaBaseImage == "graalvm") {
    dockerfile {
        baseImage = "ghcr.io/graalvm/native-image-community:21"
    }
}

dockerBuild {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/$project.parent.name-$project.name-${javaBaseImage}:$project.version"]
}

dockerBuildNative {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/${project.parent.name}-${project.name}-native:$project.version"]
}

shadowJar {
    zip64 = true
}

graalvmNative {
    binaries {
        main {
            buildArgs.add('--initialize-at-run-time=org.bouncycastle.asn1.ASN1UTF8String')
        }
    }
}

dockerfileNative {
    instruction "RUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.11/main' >> /etc/apk/repositories && apk update && apk add 'zlib<1.2.12'"
}
