plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.4"
    id("io.micronaut.aot") version "4.3.4"
    id("io.micronaut.test-resources") version "4.3.4"
}

group = "micronaut.mushop"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(false)
        annotations("mushop.orders.*")
    }aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
//      testResources {
//          enabled = true 
//          version = "2.5.0" // override Micronaut Test Resources version
//          explicitPort = 15471 // by default, uses a random port
//          inferClasspath = true // true by default
//          additionalModules.add(JDBC_MYSQL) // empty by default
//          clientTimeout = 60 // in seconds, maximum time to wait for resources to be available, 60s by default
//          serverIdleTimeoutMinutes = 60 // if the server doesn't receive any request for this amount of time, it will be shut down
//          sharedServer = true // false by default
//          sharedServerNamespace = 'custom' // unset by default
//      }
}
tasks.withType(Jar).configureEach { zip64 = true }
test {
    useJUnitPlatform()
}
dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor ("io.micronaut:micronaut-inject-java")
//     compileOnly ("io.micronaut:micronaut-inject-java:${micronautVersion}")
//     testImplementation("io.micronaut:micronaut-inject-java:${micronautVersion}")
     implementation("io.micronaut.data:micronaut-data-jdbc")
     implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    
    implementation(project(":app")) {
        exclude group:'com.h2database', module:'h2'
    }
 testAnnotationProcessor "io.micronaut:micronaut-inject-java"
   
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    implementation("org.slf4j:jcl-over-slf4j")
    //  runtimeOnly("ch.qos.logback:logback-classic")

    // Authentication
    implementation("software.amazon.awssdk:sts")

    // Configuration discovery
    implementation("io.micronaut.aws:micronaut-aws-secretsmanager")
    implementation("io.micronaut.aws:micronaut-aws-parameter-store")

    // Metrics
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-cloudwatch")

    // Database
    // implementation("mysql:mysql-connector-java")
    runtimeOnly("mysql:mysql-connector-java")
    testImplementation(project(":tck"))
    implementation("io.micronaut.nats:micronaut-nats")
    // testImplementation("org.testcontainers:junit-jupiter")
    //  runtimeOnly("mysql:mysql-connector-java")
    // testImplementation("org.testcontainers:junit-jupiter")
    // testImplementation("org.testcontainers:mysql")
}

application {
    mainClass.set("mushop.orders.AwsApplication")
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

if (javaBaseImage == "graalvm") {
    dockerfile {
        baseImage = "ghcr.io/graalvm/native-image-community:21"
    }
}

dockerBuild {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/$project.parent.name-$project.name-${javaBaseImage}:$project.version"]
}

dockerBuildNative {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/${project.parent.name}-${project.name}-native:$project.version"]
}

shadowJar {
    zip64 = true
}

graalvmNative {
    binaries {
        main {
            buildArgs.add('--initialize-at-run-time=org.bouncycastle.asn1.ASN1UTF8String')
        }
    }
}

dockerfileNative {
    instruction "RUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.11/main' >> /etc/apk/repositories && apk update && apk add 'zlib<1.2.12'"
}
