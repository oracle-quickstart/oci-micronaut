plugins {
   id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.4"
    id("io.micronaut.test-resources") version "4.3.4"
    id("io.micronaut.aot") version "4.3.4"
}

group = "micronaut.mushop"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("mushop.orders.*")
    }aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true 
        optimizeNetty = true
        }
}

dependencies {
   annotationProcessor("io.micronaut.data:micronaut-data-processor")

    implementation(project(":app")) {
        exclude group:'com.h2database', module:'h2'
    }
    implementation("io.micronaut.kubernetes:micronaut-kubernetes-discovery-client")

    // Metrics
    implementation("com.oracle.oci.sdk:oci-java-sdk-monitoring")
    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-micrometer")

    // SDK
    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-sdk")

    // Database
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-atp")
    implementation platform("com.oracle.database.jdbc:ojdbc-bom:23.3.0.23.09")
    runtimeOnly("com.oracle.database.security:oraclepki")
    runtimeOnly("com.oracle.database.security:osdt_cert")
    runtimeOnly("com.oracle.database.security:osdt_core")

    testImplementation(project(":tck"))
    testImplementation("io.micronaut.nats:micronaut-nats")
    testImplementation("org.testcontainers:oracle-xe")

}

application {
    mainClass.set("mushop.orders.OciApplication")
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

if (javaBaseImage == "graalvm") {
    dockerfile {
        baseImage = "ghcr.io/graalvm/native-image-community:21"
    }
}

dockerBuild {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/$project.parent.name-$project.name-${javaBaseImage}:$project.version"]
}

dockerBuildNative {
    images = ["phx.ocir.io/oraclelabs/micronaut-showcase/mushop/${project.parent.name}-${project.name}-native:$project.version"]
}

shadowJar {
    zip64 = true
}

graalvmNative {
    binaries {
        main {
            buildArgs.add('--initialize-at-run-time=org.bouncycastle.asn1.ASN1UTF8String')
        }
    }
}

dockerfileNative {
    instruction "RUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.11/main' >> /etc/apk/repositories && apk update && apk add 'zlib<1.2.12'"
}